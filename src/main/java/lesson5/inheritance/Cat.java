package main.java.lesson5.inheritance;

public class Cat extends Animal { // extends + название класса от которого наследуемся
//.......................    Переменные и конструктор переносится в базовый класс
//    private String name; Перенесли в базовый класс Animal
//...................
//    public Cat(String name) {// конструктор переносится в базовый класс
//        this.name = name;
//    }
//........................

///////// Переопределение конструктора класса:
    // При добавлении extends + Animal - загорается красная лампочка, которая говорит, что у
    // Animal есть конструктор, который не переопределен у Cat.
    // У класса, который наследует, можно вызвать все методы базового класса, но это не касается
    // конструктора. Переопределить нужно вручную.
    // 1-й вариант - написать вручную:
    public Cat(String name) { // Измененный конструктор
        //this.name = name; // но имя у базового класса является приватным, а также такая конструкция
        // не совсем подходящая, потому что есть ключевое слово super
        super(name); // По сути super - это ссылка на базовый класс
        // вызови конструктор базового класса
    }
//////////////////////////////////////
// Если класс наследуется от абстрактного класса, в котором объявлены методы без реализации
// (abstract), а сам наш класс не является абстрактным и
// в нашем классе эти методы нереализованы, то в самом верху в объявлении нашего класса будет
// подсвечиваться ошибка. Т.е. либо наш класс нужно сделать абстрактным либо реализовать эти методы.
// Нажать на ошибке мышкой Alt+Enter, выбираем приемлемый вариант
// Implement methods
// Выбираем нужный метод, ок
// Нам подсовывается пустая заготовка:
    public String greet() {
        return "Hello, I am a Cat.";
    }
////////////////////////////////




////////////////// Геттеры и сеттеры переносим в базовый класс.
//    public String getName() { // публичный геттер
//        return this.name;  // return name; - тоже будет работать, компилятор его сам доставит
//    }
//
//    public void setName(String name) { // публичный сеттер
//        this.name = name;
//    }
///////////////////



}
